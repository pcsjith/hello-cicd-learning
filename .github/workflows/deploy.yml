name: CD - Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_run:
    workflows: ["CI - Build and Test"]
    types:
      - completed
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT || 22 }}
        script: |
          # Navigate to deployment directory
          cd /opt/hello-cicd || exit 1
          
          # Pull latest images
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Update docker-compose with new image versions
          export IMAGE_TAG="${{ github.sha }}"
          
          # Pull new images
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
          
          # Deploy with zero downtime using rolling update
          docker-compose -f docker-compose.prod.yml up -d --remove-orphans
          
          # Wait for services to be healthy
          echo "Waiting for services to be healthy..."
          sleep 30
          
          # Check if services are running
          if ! curl -f http://localhost:3001/health; then
            echo "Backend health check failed!"
            docker-compose -f docker-compose.prod.yml logs backend
            exit 1
          fi
          
          if ! curl -f http://localhost:3000/health; then
            echo "Frontend health check failed!"
            docker-compose -f docker-compose.prod.yml logs frontend
            exit 1
          fi
          
          # Clean up old images
          docker image prune -f
          
          echo "Deployment successful! üöÄ"

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment successful!"
        else
          echo "‚ùå Deployment failed!"
        fi

    - name: Post deployment health check
      run: |
        # Wait a bit for deployment to stabilize
        sleep 60
        
        # Check if the application is accessible from outside
        if [ -n "${{ secrets.PRODUCTION_HOST }}" ]; then
          curl -f "http://${{ secrets.PRODUCTION_HOST }}:3000/health" || echo "Warning: External health check failed"
          curl -f "http://${{ secrets.PRODUCTION_HOST }}:3001/health" || echo "Warning: External API health check failed"
        fi