version: '3.8'

services:
  # Backend API service
  backend:
    image: ghcr.io/${GITHUB_REPOSITORY:-hello-cicd-learning}-backend:latest
    container_name: hello-backend-prod
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - hello-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Frontend web service
  frontend:
    image: ghcr.io/${GITHUB_REPOSITORY:-hello-cicd-learning}-frontend:latest
    container_name: hello-frontend-prod
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - hello-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Optional: Add a reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: hello-nginx-proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx-proxy.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - hello-network
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

networks:
  hello-network:
    driver: bridge